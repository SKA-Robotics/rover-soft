<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="optical_offset_x" value="-0.01" />

  <xacro:macro name="oak-d-w" params="prefix:=oak-d-w package:=^ cameras:=^ cameras_inertial:=^ stereo_fps:=^|30 imu_frequency:=^|200 datum:=^ elevation:=^ year:=^ calibration:=^|${xacro.load_yaml('$(find sirius_cameras)/config/oak_d_w/kalibr_imucam_chain.yaml')}"> 

    <xacro:property name="baseline" value="${sqrt(calibration.cam1.T_cn_cnm1[0][3]**2 + calibration.cam1.T_cn_cnm1[1][3]**2 + calibration.cam1.T_cn_cnm1[2][3]**2)}"/>

    <link name="${prefix}_camera_center">
      <visual>
        <geometry>
          <mesh filename="package://${package}/meshes/cameras/OAK-D-W.stl"/>
        </geometry>
        <origin xyz="${cameras['oak-d-w_thickness']/2} 0 0" rpy="-${pi/2} ${pi} -${pi/2}"/>
      </visual>
      <collision>
        <geometry>
          <box size="${cameras['oak-d-w_thickness']} ${cameras['oak-d-w_width']} ${cameras['oak-d-w_height']}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="${cameras_inertial['oak-d-w_mass']}"/>
        <inertia ixx="${cameras_inertial['oak-d-w_inertia']['ixx']}" ixy="${cameras_inertial['oak-d-w_inertia']['ixy']}" ixz="${cameras_inertial['oak-d-w_inertia']['ixz']}" iyy="${cameras_inertial['oak-d-w_inertia']['iyy']}" iyz="${cameras_inertial['oak-d-w_inertia']['iyz']}" izz="${cameras_inertial['oak-d-w_inertia']['izz']}"/>
      </inertial>
    </link>
    <link name="${prefix}_rgb_camera_optical_frame"/>

    <link name="${prefix}_left_camera_frame" />
    <link name="${prefix}_left_camera_optical_frame"/>

    <link name="${prefix}_right_camera_frame" />
    <link name="${prefix}_right_camera_optical_frame"/>
    <link name="${prefix}_camera_imu_frame"/>


    <joint name="${prefix}_rgb_camera_optical_joint" type="fixed">
      <origin xyz="${optical_offset_x} 0 0" rpy="-${pi/2} 0.0 -${pi/2}"/>
      <parent link="${prefix}_camera_center"/>
      <child link="${prefix}_rgb_camera_optical_frame"/>
    </joint>

    <joint name="${prefix}_left_camera_joint" type="fixed">
      <parent link="${prefix}_camera_center"/>
      <child link="${prefix}_left_camera_frame"/>
      <origin xyz="0 ${baseline/2} 0" rpy="0 0 0" />
    </joint>
    <joint name="${prefix}_left_camera_optical_joint" type="fixed">
      <origin xyz="${calibration.cam1.T_cn_cnm1[0][3]} ${calibration.cam1.T_cn_cnm1[1][3]} ${calibration.cam1.T_cn_cnm1[2][3]}" rpy="${atan2(calibration.cam1.T_cn_cnm1[2][1],calibration.cam1.T_cn_cnm1[2][2])} ${atan2(-calibration.cam1.T_cn_cnm1[2][0],sqrt(calibration.cam1.T_cn_cnm1[2][1]**2 + calibration.cam1.T_cn_cnm1[2][2]**2))} ${atan2(calibration.cam1.T_cn_cnm1[1][0],calibration.cam1.T_cn_cnm1[0][0])}"/>
      <parent link="${prefix}_right_camera_optical_frame"/>
      <child link="${prefix}_left_camera_optical_frame"/>
    </joint>

    <joint name="${prefix}_right_camera_joint" type="fixed">
      <parent link="${prefix}_camera_center"/>
      <child link="${prefix}_right_camera_frame"/>
      <origin xyz="0 -${baseline/2} 0" rpy="0 0 0" />
    </joint>
    <joint name="${prefix}_right_camera_optical_joint" type="fixed">
      <origin xyz="${optical_offset_x} 0 0" rpy="-${pi/2} 0.0 -${pi/2}"/>
      <parent link="${prefix}_right_camera_frame"/>
      <child link="${prefix}_right_camera_optical_frame"/>
    </joint>
    <joint name="${prefix}_camera_imu_frame_joint" type="fixed">
      <!-- IMU frame offset copied from ZED2 camera -->
      <origin xyz="${calibration.cam0.T_cam_imu[0][3]} ${calibration.cam0.T_cam_imu[1][3]} ${calibration.cam0.T_cam_imu[2][3]}" rpy="${atan2(calibration.cam0.T_cam_imu[2][1],calibration.cam0.T_cam_imu[2][2])} ${atan2(-calibration.cam0.T_cam_imu[2][0],sqrt(calibration.cam0.T_cam_imu[2][1]**2 + calibration.cam0.T_cam_imu[2][2]**2))} ${atan2(calibration.cam0.T_cam_imu[1][0],calibration.cam0.T_cam_imu[0][0])}"/>
      <parent link="${prefix}_left_camera_optical_frame"/>
      <child link="${prefix}_camera_imu_frame"/>
    </joint>

    <!-- Left/Depth camera -->
    <gazebo reference="${prefix}_camera_center">
      <sensor type="multicamera" name="${prefix}_stereo_camera">
        <always_on>true</always_on>
        <update_rate>${stereo_fps}</update_rate>
        <visualize>false</visualize> 
        <camera name="/${prefix}_camera/left">
          <pose>0 ${baseline/2} 0 0 0 0</pose>
          <image>
            <width>${calibration.cam0.resolution[0]}</width>
            <height>${calibration.cam0.resolution[1]}</height>
            <format>L8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
          <lens>            
            <intrinsics>
            <fx>${(calibration.cam0.intrinsics[0] + calibration.cam0.intrinsics[1])/2}</fx>
            <fy>${(calibration.cam0.intrinsics[0] + calibration.cam0.intrinsics[1])/2}</fy>
            <cx>${calibration.cam0.intrinsics[2]}</cx>
            <cy>${calibration.cam0.intrinsics[3]}</cy>
            <s>0</s>
            </intrinsics>
            <scale_to_hfov>false</scale_to_hfov>
          </lens>
        </camera>
        <camera name="/${prefix}_camera/right">
          <pose>0 -${baseline/2} 0 0 0 0</pose>
          <image>
            <width>${calibration.cam0.resolution[0]}</width>
            <height>${calibration.cam0.resolution[1]}</height>
            <format>L8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
          <lens>            
            <intrinsics>
            <fx>${(calibration.cam0.intrinsics[0] + calibration.cam0.intrinsics[1])/2}</fx>
            <fy>${(calibration.cam0.intrinsics[0] + calibration.cam0.intrinsics[1])/2}</fy>
            <cx>${calibration.cam0.intrinsics[2]}</cx>
            <cy>${calibration.cam0.intrinsics[3]}</cy>
            <s>0</s>
            </intrinsics>
            <scale_to_hfov>false</scale_to_hfov>
          </lens>
        </camera>
        <plugin name="stereo_camera_controller" filename="libgazebo_ros_multicamera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>${stereo_fps}</updateRate>
          <cameraName>/${prefix}_camera</cameraName>
          <imageTopicName>image_rect_gray</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>${prefix}_left_camera_optical_frame</frameName>
          <rightFrameName>${prefix}_right_camera_optical_frame</rightFrameName>
          <hackBaseline>${baseline}</hackBaseline>  
          <focalLength>${(calibration.cam0.intrinsics[0] + calibration.cam0.intrinsics[1])/2}</focalLength>
          <Cx>${calibration.cam0.intrinsics[2]}</Cx>
          <Cy>${calibration.cam0.intrinsics[3]}</Cy>
        </plugin>
      </sensor>
       <sensor type="depth" name="${prefix}_camera_depth">
        <!-- Rectified images, Depth images, Point Clouds -->
        <always_on>true</always_on>
        <update_rate>${stereo_fps}</update_rate>
        <visualize>false</visualize> 
        <camera name="/${prefix}_camera/depth">
          <image>
            <width>${calibration.cam0.resolution[0]}</width>
            <height>${calibration.cam0.resolution[1]}</height>
            <format>L8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
          <lens>            
            <intrinsics>
            <fx>${(calibration.cam0.intrinsics[0] + calibration.cam0.intrinsics[1])/2}</fx>
            <fy>${(calibration.cam0.intrinsics[0] + calibration.cam0.intrinsics[1])/2}</fy>
            <cx>${calibration.cam0.intrinsics[2]}</cx>
            <cy>${calibration.cam0.intrinsics[3]}</cy>
            <s>0</s>
            </intrinsics>
            <scale_to_hfov>false</scale_to_hfov>
          </lens>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_openni_kinect.so">
          <cameraName>/${prefix}_camera</cameraName>
          <imageTopicName>thrash/image_rect_gray</imageTopicName>
          <cameraInfoTopicName>thrash/camera_info</cameraInfoTopicName>
          <depthImageTopicName>depth/depth_registered</depthImageTopicName>
          <depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
          <pointCloudTopicName>point_cloud/cloud_registered</pointCloudTopicName>
          <pointCloudCutoff>0.35</pointCloudCutoff>
          <pointCloudCutoffMax>35.0</pointCloudCutoffMax>
          <frameName>${prefix}_left_camera_optical_frame</frameName>
          <baseline>${baseline}</baseline>
          <focalLength>${(calibration.cam0.intrinsics[0] + calibration.cam0.intrinsics[1])/2}</focalLength>
          <Cx>${calibration.cam0.intrinsics[2]}</Cx>
          <Cy>${calibration.cam0.intrinsics[3]}</Cy>
          <hackBaseline>0.0</hackBaseline>
        </plugin>
      </sensor> 
    </gazebo>

    <!-- IMU -->
    <gazebo reference="${prefix}_camera_imu_frame">
      <sensor type="imu" name="imu_sensor">
        <always_on>true</always_on>
        <update_rate>${imu_frequency}</update_rate>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <stddev>0.0541052</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <stddev>0.0541052</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <stddev>0.0541052</stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <stddev>0.35</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <stddev>0.35</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <stddev>0.35</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <topicName>/${prefix}_camera/imu/data</topicName>
          <frameName>${prefix}_camera_imu_frame</frameName>
          <updateRateHZ>${imu_frequency}</updateRateHZ>
          <initialOrientationAsReference>false</initialOrientationAsReference>
          <xyzOffset>0 0.0 0.0</xyzOffset>
          <rpyOffset>0 0 ${datum[2] * pi/180}</rpyOffset>
        </plugin>
      </sensor>
    </gazebo>
    <!-- MAGNETOMETER -->
    <gazebo reference="${prefix}_camera_imu_frame">
      <sensor type="magnetometer" name="magnetometer_sensor">
        <always_on>true</always_on>
        <update_rate>50</update_rate>
        <magnetometer>
          <x>
            <noise type="gaussian">
              <stddev>1.4e-6</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <stddev>1.4e-6</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <stddev>1.4e-6</stddev>
            </noise>
          </z>
        </magnetometer>
        <plugin filename="libgazebo_ros_magnetometer_sensor.so" name="magnetometer_plugin">
          <topicName>/${prefix}_camera/imu/mag</topicName>
          <frameName>${prefix}_camera_imu_frame</frameName>
          <updateRateHZ>50.0</updateRateHZ>
          <sphericalCoordinates>
            <latitudeDeg>${datum[0]}</latitudeDeg>
            <longitudeDeg>${datum[1]}</longitudeDeg>
            <headingDeg>${datum[2]}</headingDeg>
            <elevation>${elevation}</elevation>
            <year>${year}</year>
          </sphericalCoordinates>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

</robot>